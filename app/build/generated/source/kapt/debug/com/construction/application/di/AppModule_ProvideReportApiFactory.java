// Generated by Dagger (https://dagger.dev).
package com.construction.application.di;

import android.content.Context;
import com.construction.application.data.network.RemoteDataSource;
import com.construction.application.data.network.api.ReportApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideReportApiFactory implements Factory<ReportApi> {
  private final Provider<Context> contextProvider;

  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  public AppModule_ProvideReportApiFactory(Provider<Context> contextProvider,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    this.contextProvider = contextProvider;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public ReportApi get() {
    return provideReportApi(contextProvider.get(), remoteDataSourceProvider.get());
  }

  public static AppModule_ProvideReportApiFactory create(Provider<Context> contextProvider,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    return new AppModule_ProvideReportApiFactory(contextProvider, remoteDataSourceProvider);
  }

  public static ReportApi provideReportApi(Context context, RemoteDataSource remoteDataSource) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideReportApi(context, remoteDataSource));
  }
}
