// Generated by Dagger (https://dagger.dev).
package com.construction.application.data.repository;

import com.construction.application.data.db.AppDatabase;
import com.construction.application.data.network.api.ReportApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ReportRepository_Factory implements Factory<ReportRepository> {
  private final Provider<ReportApi> apiProvider;

  private final Provider<AppDatabase> dbProvider;

  public ReportRepository_Factory(Provider<ReportApi> apiProvider,
      Provider<AppDatabase> dbProvider) {
    this.apiProvider = apiProvider;
    this.dbProvider = dbProvider;
  }

  @Override
  public ReportRepository get() {
    return newInstance(apiProvider.get(), dbProvider.get());
  }

  public static ReportRepository_Factory create(Provider<ReportApi> apiProvider,
      Provider<AppDatabase> dbProvider) {
    return new ReportRepository_Factory(apiProvider, dbProvider);
  }

  public static ReportRepository newInstance(ReportApi api, AppDatabase db) {
    return new ReportRepository(api, db);
  }
}
